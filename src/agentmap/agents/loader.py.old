"""
Agent loader for AgentMap.

This module provides utilities for dynamically loading agent classes
and creating agent instances, serving as a clean wrapper that delegates
to AgentFactoryService through dependency injection.
"""
from typing import Dict, Any


class AgentLoader:
    """
    Utility for loading and instantiating agent instances.
    
    This class provides a compatibility layer for the original AgentLoader
    while delegating to AgentFactoryService through dependency injection.
    """
    
    def __init__(self, context: Dict[str, Any] = None):
        """
        Initialize the agent loader.
        
        Args:
            context: Context dictionary to pass to created agents
        """
        self.context = context or {}
        
    def get_agent(self, agent_type: str, name: str, prompt: str) -> Any:
        """
        Get an agent instance by type.
        
        Args:
            agent_type: The type identifier for the agent
            name: Name of the agent node
            prompt: Prompt or instruction for the agent
            
        Returns:
            Agent instance
            
        Raises:
            ValueError: If agent type is not found or dependencies are missing
        """
        from agentmap.di import safe_get_service, ApplicationContainer
        container = ApplicationContainer()
        factory_service = safe_get_service(container, 'agent_factory_service')
        
        if factory_service is None:
            raise ValueError(f"AgentFactoryService not available. Cannot create agent '{agent_type}'.")
        
        return factory_service.create_agent(agent_type, name, prompt, self.context)


def create_agent(agent_type: str, name: str, prompt: str, context: Dict[str, Any] = None) -> Any:
    """
    Create an agent instance with the given parameters.
    
    Args:
        agent_type: The type identifier for the agent
        name: Name of the agent node
        prompt: Prompt or instruction
        context: Context dictionary to pass to the agent
        
    Returns:
        Agent instance
        
    Raises:
        ValueError: If agent type is not found or dependencies are missing
    """
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    factory_service = safe_get_service(container, 'agent_factory_service')
    
    if factory_service is None:
        raise ValueError(f"AgentFactoryService not available. Cannot create agent '{agent_type}'.")
    
    return factory_service.create_agent(agent_type, name, prompt, context)


def validate_agent_dependencies(agent_type: str) -> tuple:
    """
    Validate that all dependencies for an agent type are available.
    
    Args:
        agent_type: The agent type to validate
        
    Returns:
        Tuple of (dependencies_valid, missing_dependencies)
    """
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    factory_service = safe_get_service(container, 'agent_factory_service')
    
    if factory_service is None:
        return False, ["AgentFactoryService not available"]
    
    return factory_service.validate_agent_dependencies(agent_type)


def list_available_agent_types() -> list:
    """
    Get a list of all available agent types that can be created.
    
    Returns:
        List of agent type names that have valid dependencies
    """
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    factory_service = safe_get_service(container, 'agent_factory_service')
    
    if factory_service is None:
        return []
    
    return factory_service.list_available_agent_types()


def get_agent_class(agent_type: str):
    """
    Get an agent class by type.
    
    Args:
        agent_type: Type identifier to look up
        
    Returns:
        The agent class or None if not found
    """
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    factory_service = safe_get_service(container, 'agent_factory_service')
    
    if factory_service is None:
        return None
    
    return factory_service.get_agent_class(agent_type)


def get_agent_creation_context(context: Dict[str, Any] = None) -> Dict[str, Any]:
    """
    Prepare a complete context dictionary for agent creation.
    
    Args:
        context: Base context dictionary
        
    Returns:
        Enhanced context with additional metadata
    """
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    factory_service = safe_get_service(container, 'agent_factory_service')
    
    if factory_service is None:
        return context or {}
    
    return factory_service.get_agent_creation_context(context)


# Backward compatibility functions for direct factory access
def create_agent_loader(context: Dict[str, Any] = None) -> AgentLoader:
    """
    Create an AgentLoader instance with the given context.
    
    Args:
        context: Context dictionary to pass to created agents
        
    Returns:
        AgentLoader instance
    """
    return AgentLoader(context)
