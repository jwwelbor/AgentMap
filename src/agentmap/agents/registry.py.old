"""
Registry for AgentMap agent components.

This module provides registration and discovery functionality for agents,
serving as a clean wrapper that delegates to AgentRegistryService through
dependency injection.
"""
from typing import Dict, Any, Type, Optional


def register_agent(agent_type: str, agent_class: Type) -> None:
    """
    Register an agent class in the registry.
    
    Args:
        agent_type: String identifier for the agent type
        agent_class: Agent class to register
    """
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    registry_service = safe_get_service(container, 'agent_registry_service')
    if registry_service is not None:
        registry_service.register_agent(agent_type, agent_class)


def get_agent_class(agent_type: str) -> Optional[Type]:
    """
    Get an agent class from the registry.
    
    Args:
        agent_type: Type identifier to look up
        
    Returns:
        The agent class or None if not found
    """
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    registry_service = safe_get_service(container, 'agent_registry_service')
    if registry_service is None:
        return None
    return registry_service.get_agent_class(agent_type)


def get_agent_map() -> Dict[str, Type]:
    """
    Get a dictionary of all registered agent types and classes.
    
    Returns:
        Dictionary mapping agent types to agent classes
    """
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    registry_service = safe_get_service(container, 'agent_registry_service')
    if registry_service is None:
        return {}
    return registry_service.list_agents()


def unregister_agent(agent_type: str) -> None:
    """
    Unregister an agent type from the registry.
    
    Args:
        agent_type: String identifier for the agent type to remove
    """
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    registry_service = safe_get_service(container, 'agent_registry_service')
    if registry_service is not None:
        registry_service.unregister_agent(agent_type)


def has_agent(agent_type: str) -> bool:
    """
    Check if an agent type is registered.
    
    Args:
        agent_type: Type identifier to check
        
    Returns:
        True if agent type is registered, False otherwise
    """
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    registry_service = safe_get_service(container, 'agent_registry_service')
    if registry_service is None:
        return False
    return registry_service.has_agent(agent_type)


def get_default_agent_class() -> Optional[Type]:
    """
    Get the default agent class if one is registered.
    
    Returns:
        The default agent class or None if no default is set
    """
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    registry_service = safe_get_service(container, 'agent_registry_service')
    if registry_service is None:
        return None
    return registry_service.get_default_agent_class()


def set_default_agent_class(agent_class: Type) -> None:
    """
    Set the default agent class by registering it with type 'default'.
    
    Args:
        agent_class: Agent class to set as default
    """
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    registry_service = safe_get_service(container, 'agent_registry_service')
    if registry_service is not None:
        registry_service.set_default_agent_class(agent_class)


def get_registered_agent_types() -> list:
    """
    Get a list of all registered agent type names.
    
    Returns:
        List of registered agent type names
    """
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    registry_service = safe_get_service(container, 'agent_registry_service')
    if registry_service is None:
        return []
    return registry_service.get_registered_agent_types()


def clear_all_agents() -> None:
    """
    Clear all registered agents.
    
    Warning: This removes all agent registrations including the default.
    """
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    registry_service = safe_get_service(container, 'agent_registry_service')
    if registry_service is not None:
        registry_service.clear_all_agents()


# Compatibility class for the old Registry pattern
class Registry:
    """
    Registry class for managing agent types and their implementations.
    
    This class provides compatibility with the old singleton Registry pattern
    while delegating to the new AgentRegistryService through dependency injection.
    """
    
    def register(self, agent_type: str, agent_class: Type) -> None:
        """
        Register an agent class with a given type.
        
        Args:
            agent_type: String identifier for the agent type
            agent_class: Agent class to register
        """
        register_agent(agent_type, agent_class)
    
    def get(self, agent_type: str, default: Optional[Type] = None) -> Optional[Type]:
        """
        Get an agent class by type, with optional default.
        
        Args:
            agent_type: Type identifier to look up
            default: Default value to return if not found
            
        Returns:
            The agent class or the default value if not found
        """
        from agentmap.di import safe_get_service, ApplicationContainer
        container = ApplicationContainer()
        registry_service = safe_get_service(container, 'agent_registry_service')
        if registry_service is None:
            return default
        return registry_service.get_agent_class(agent_type, default)
    
    def list_agents(self) -> Dict[str, Type]:
        """
        Get a dictionary of all registered agent types and classes.
        
        Returns:
            Dictionary mapping agent types to agent classes
        """
        return get_agent_map()


# Create compatibility instance
agent_registry = Registry()
