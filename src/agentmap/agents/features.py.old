"""
Feature flags for AgentMap agents.

This module provides clean wrapper functions that delegate to FeaturesRegistryService
through dependency injection, removing global state and singleton patterns.
"""


def is_llm_enabled() -> bool:
    """Check if LLM agents are enabled."""
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    features_service = safe_get_service(container, 'features_registry_service')
    if features_service is None:
        return False
    return features_service.is_feature_enabled('llm')


def is_storage_enabled() -> bool:
    """Check if storage agents are enabled."""
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    features_service = safe_get_service(container, 'features_registry_service')
    if features_service is None:
        return False
    return features_service.is_feature_enabled('storage')


def enable_llm_agents() -> None:
    """Enable LLM agent functionality."""
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    features_service = safe_get_service(container, 'features_registry_service')
    if features_service is not None:
        features_service.enable_feature('llm')


def enable_storage_agents() -> None:
    """Enable storage agent functionality."""
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    features_service = safe_get_service(container, 'features_registry_service')
    if features_service is not None:
        features_service.enable_feature('storage')


def set_provider_available(provider: str, available: bool = True) -> None:
    """Set availability for a specific LLM provider."""
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    features_service = safe_get_service(container, 'features_registry_service')
    if features_service is not None:
        features_service.set_provider_available('llm', provider, available)


def is_provider_available(provider: str) -> bool:
    """Check if a specific LLM provider is available."""
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    features_service = safe_get_service(container, 'features_registry_service')
    if features_service is None:
        return False
    return features_service.is_provider_available('llm', provider)


def get_available_providers() -> list:
    """Get a list of available LLM providers."""
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    features_service = safe_get_service(container, 'features_registry_service')
    if features_service is None:
        return []
    return features_service.get_available_providers('llm')


# Additional helper functions for comprehensive feature management
def disable_llm_agents() -> None:
    """Disable LLM agent functionality."""
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    features_service = safe_get_service(container, 'features_registry_service')
    if features_service is not None:
        features_service.disable_feature('llm')


def disable_storage_agents() -> None:
    """Disable storage agent functionality."""
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    features_service = safe_get_service(container, 'features_registry_service')
    if features_service is not None:
        features_service.disable_feature('storage')


def set_provider_validated(provider: str, validated: bool = True) -> None:
    """Set validation status for a specific LLM provider."""
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    features_service = safe_get_service(container, 'features_registry_service')
    if features_service is not None:
        features_service.set_provider_validated('llm', provider, validated)


def is_provider_validated(provider: str) -> bool:
    """Check if a specific LLM provider is validated."""
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    features_service = safe_get_service(container, 'features_registry_service')
    if features_service is None:
        return False
    return features_service.is_provider_validated('llm', provider)


def is_provider_registered(provider: str) -> bool:
    """Check if a specific LLM provider is registered."""
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    features_service = safe_get_service(container, 'features_registry_service')
    if features_service is None:
        return False
    return features_service.is_provider_registered('llm', provider)


# Storage-specific provider functions
def set_storage_provider_available(provider: str, available: bool = True) -> None:
    """Set availability for a specific storage provider."""
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    features_service = safe_get_service(container, 'features_registry_service')
    if features_service is not None:
        features_service.set_provider_available('storage', provider, available)


def is_storage_provider_available(provider: str) -> bool:
    """Check if a specific storage provider is available."""
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    features_service = safe_get_service(container, 'features_registry_service')
    if features_service is None:
        return False
    return features_service.is_provider_available('storage', provider)


def get_available_storage_providers() -> list:
    """Get a list of available storage providers."""
    from agentmap.di import safe_get_service, ApplicationContainer
    container = ApplicationContainer()
    features_service = safe_get_service(container, 'features_registry_service')
    if features_service is None:
        return []
    return features_service.get_available_providers('storage')
