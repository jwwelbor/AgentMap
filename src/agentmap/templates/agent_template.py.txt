from agentmap.agents.base_agent import BaseAgent
{imports}
from typing import Dict, Any, Optional, Tuple
from agentmap.logging.tracking.execution_tracker import ExecutionTracker
import logging.Logger

{class_definition}
    """
    {agent_type} Agent{service_description}
    
    {description}
    Node: {node_name}
    Expected input fields: {input_fields}
    Return value from processing will be paired in the graph state with key:{output_field}
    {services_doc}
    {prompt_doc}
    """
    
    def __init__(self, name: str, prompt: str = "", logger: logging.Logger, execution_tracker: ExecutionTracker, context: Dict = None):
        super().__init__(name, prompt, logger, execution_tracker, context)
        {service_attributes}
    
    # uncomment to add pre-process hook
    # def pre_process(self, inputs: Dict[str, Any]) -> Tuple[Any, Any]:
        """
        Pre-process inputs before main processing.
        
        Override this method to add input validation, transformation, 
        or preparation logic specific to your agent.
        
        Args:
            inputs: Raw input dictionary from the graph state
            
        Returns:
            Tuple of the state, Processed inputs dictionary ready for main processing
        """
        # TODO: Add any input validation, transformation, or preparation logic
        # Example:
        # - Validate required fields exist
        # - Normalize data formats
        # - Set default values
        # - Transform input structure

        # should return the state, Dict[str, any] of inputs that have been processed and will be passed to "process" method 
        # return state, inputs
    
    def process(self, inputs: Dict[str, Any]) -> Any, Any:
        """
        Process the inputs and return the output value.
        
        This is the main processing method where your agent's logic should be implemented.
        The return value will be stored in the graph state under the output field name.
        
        Args:
            inputs (dict): Contains the input values with keys: {input_fields}
            
        Returns:
            Tuple of (output_value, last_action_success): {output_field} (will be stored in graph state), boolean indicating success

        """
        try:
            # Access input fields directly from inputs dictionary
{input_field_access}
            
            # Example service usage:
{service_usage_examples}
            
            # TODO: Implement your agent logic here
            # Description: {description}
            # Context: {context}
            # 
            # Use the extracted input fields and available services to process the data.
            # Return the result that should be stored in the output field.
            
            return f"Processed by {{self.name}}", True
            
        except Exception as e:
            # Handle errors gracefully - you can customize error handling here
            self.logger.error(f"Error in {{self.name}}: {{str(e)}}")
            return {{
                "success": False,
                "error": str(e),
                "agent": self.name
            }}, False
    
    # uncomment to add post-process hook
    # def post_process(self, state: Any, inputs: Dict[str, Any], output) -> Tuple[Any, Any]:
        """
        Post-process the result before returning.
        
        Override this method to add result validation, formatting, 
        or cleanup logic specific to your agent.
        
        Args:
            state: The full state object
            inputs: Original inputs (for context if needed),
            output: output from the process method
            
        Returns:
            Tuple of addtional updates for the state (dict or pydantic), processed result that will be paired in the graph state with key:{output_field}
        """
        # TODO: Add any result validation, formatting, or cleanup logic
        # Example:
        # - Validate result structure
        # - Format output data
        # - Add metadata
        # - Clean up temporary resources
        
        # return state, result

{usage_examples_section}
