# agentmap/graph/node_registry_injection.py
"""
Node registry injection utilities for orchestrator agents.

This module provides functions to inject the node registry directly into
orchestrator agent instances after graph compilation.
"""
from typing import Any, Dict, Optional
import inspect

from agentmap.logging import get_logger

logger = get_logger(__name__)


def inject_node_registry_into_orchestrators(graph: Any, node_registry: Dict[str, Dict[str, Any]]) -> None:
    """
    Find orchestrator nodes in the compiled graph and inject the node registry.
    
    This function traverses the compiled LangGraph to find orchestrator agents
    and directly sets their node_registry attribute.
    
    Args:
        graph: Compiled LangGraph StateGraph
        node_registry: Node registry to inject into orchestrators
    """
    if not node_registry:
        logger.debug("[NodeRegistryInjection] No node registry provided, skipping injection")
        return
        
    logger.debug(f"[NodeRegistryInjection] Injecting node registry with {len(node_registry)} nodes")
    
    # Access the nodes in the compiled graph
    if not hasattr(graph, 'nodes'):
        logger.warning("[NodeRegistryInjection] Graph has no 'nodes' attribute, cannot inject registry")
        return
        
    orchestrator_count = 0
    
    # Iterate through all nodes in the graph
    for node_name, node_func in graph.nodes.items():
        logger.trace(f"[NodeRegistryInjection] Examining node: {node_name}")
        
        # Extract the agent instance from the node function
        agent = extract_agent_from_node(node_func)
        
        if agent:
            # Check if this is an orchestrator agent
            agent_class_name = agent.__class__.__name__
            if agent_class_name == "OrchestratorAgent":
                logger.debug(f"[NodeRegistryInjection] Found orchestrator: {node_name}")
                
                # Inject the node registry
                agent.node_registry = node_registry
                orchestrator_count += 1
                
                logger.info(f"[NodeRegistryInjection] Injected registry into orchestrator '{node_name}'")
            else:
                logger.trace(f"[NodeRegistryInjection] Node '{node_name}' is a {agent_class_name}, skipping")
        else:
            logger.trace(f"[NodeRegistryInjection] Could not extract agent from node '{node_name}'")
    
    if orchestrator_count == 0:
        logger.debug("[NodeRegistryInjection] No orchestrator nodes found in graph")
    else:
        logger.info(f"[NodeRegistryInjection] Successfully injected registry into {orchestrator_count} orchestrator(s)")


def extract_agent_from_node(node_func: Any) -> Optional[Any]:
    """
    Extract the agent instance from a compiled node function.
    
    LangGraph wraps our agent methods, so we need to dig into the closure
    to find the actual agent instance.
    
    Args:
        node_func: The node function from the compiled graph
        
    Returns:
        The agent instance if found, None otherwise
    """
    # If it's directly an agent instance (unlikely but check)
    if hasattr(node_func, '__self__') and hasattr(node_func.__self__, 'run'):
        return node_func.__self__
    
    # If it's a bound method, get the instance
    if inspect.ismethod(node_func):
        return node_func.__self__
    
    # If it's a function, check its closure for agent references
    if inspect.isfunction(node_func):
        # Look through closure variables
        if hasattr(node_func, '__closure__') and node_func.__closure__:
            for cell in node_func.__closure__:
                try:
                    cell_contents = cell.cell_contents
                    # Check if this is an agent instance
                    if hasattr(cell_contents, 'run') and hasattr(cell_contents, 'name'):
                        logger.trace(f"[ExtractAgent] Found agent in closure: {cell_contents.name}")
                        return cell_contents
                    # Check if it's a bound method whose self is an agent
                    if inspect.ismethod(cell_contents) and hasattr(cell_contents.__self__, 'run'):
                        logger.trace(f"[ExtractAgent] Found agent via bound method in closure")
                        return cell_contents.__self__
                except ValueError:
                    # Cell might be empty
                    continue
    
    # Try to find agent through local variables in the function
    if hasattr(node_func, '__code__'):
        # This is more complex and might not always work
        # but can be extended if needed
        pass
    
    return None


def verify_injection(graph: Any) -> Dict[str, bool]:
    """
    Verify which orchestrator nodes have successfully received the node registry.
    
    Args:
        graph: Compiled LangGraph StateGraph
        
    Returns:
        Dictionary mapping orchestrator node names to whether they have a registry
    """
    results = {}
    
    if not hasattr(graph, 'nodes'):
        return results
        
    for node_name, node_func in graph.nodes.items():
        agent = extract_agent_from_node(node_func)
        
        if agent and agent.__class__.__name__ == "OrchestratorAgent":
            has_registry = agent.node_registry is not None
            results[node_name] = has_registry
            logger.debug(f"[VerifyInjection] Orchestrator '{node_name}' has registry: {has_registry}")
    
    return results