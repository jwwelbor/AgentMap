# AWS Terraform Configuration for AgentMap Serverless Functions
# This creates Lambda functions with multiple trigger types

terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
}

# Variables
variable "aws_region" {
  description = "AWS region"
  type        = string
  default     = "us-east-1"
}

variable "project_name" {
  description = "Project name for resource naming"
  type        = string
  default     = "agentmap"
}

variable "environment" {
  description = "Environment (dev, staging, prod)"
  type        = string
  default     = "dev"
}

variable "lambda_timeout" {
  description = "Lambda function timeout in seconds"
  type        = number
  default     = 300
}

variable "lambda_memory_size" {
  description = "Lambda function memory size in MB"
  type        = number
  default     = 512
}

# Local variables
locals {
  function_name = "${var.project_name}-${var.environment}"
  common_tags = {
    Project     = var.project_name
    Environment = var.environment
    ManagedBy   = "terraform"
  }
}

# Lambda execution role
resource "aws_iam_role" "lambda_execution_role" {
  name = "${local.function_name}-lambda-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })

  tags = local.common_tags
}

# Lambda execution policy
resource "aws_iam_role_policy" "lambda_execution_policy" {
  name = "${local.function_name}-lambda-policy"
  role = aws_iam_role.lambda_execution_role.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ]
        Resource = "arn:aws:logs:${var.aws_region}:*:*"
      },
      {
        Effect = "Allow"
        Action = [
          "sqs:ReceiveMessage",
          "sqs:DeleteMessage",
          "sqs:GetQueueAttributes"
        ]
        Resource = aws_sqs_queue.agentmap_queue.arn
      },
      {
        Effect = "Allow"
        Action = [
          "dynamodb:DescribeStream",
          "dynamodb:GetRecords",
          "dynamodb:GetShardIterator",
          "dynamodb:ListStreams"
        ]
        Resource = aws_dynamodb_table.agentmap_table.stream_arn
      },
      {
        Effect = "Allow"
        Action = [
          "s3:GetObject",
          "s3:PutObject"
        ]
        Resource = "${aws_s3_bucket.agentmap_data.arn}/*"
      },
      {
        Effect = "Allow"
        Action = [
          "sns:Publish"
        ]
        Resource = aws_sns_topic.agentmap_results.arn
      }
    ]
  })
}

# Lambda function package
data "archive_file" "lambda_zip" {
  type        = "zip"
  source_dir  = "${path.module}/../../src"
  output_path = "${path.module}/lambda_package.zip"
  excludes = [
    "__pycache__",
    "*.pyc",
    ".pytest_cache",
    "tests/"
  ]
}

# Main Lambda function
resource "aws_lambda_function" "agentmap_function" {
  filename         = data.archive_file.lambda_zip.output_path
  function_name    = local.function_name
  role            = aws_iam_role.lambda_execution_role.arn
  handler         = "agentmap.core.handlers.aws_lambda.lambda_handler"
  source_code_hash = data.archive_file.lambda_zip.output_base64sha256
  runtime         = "python3.9"
  timeout         = var.lambda_timeout
  memory_size     = var.lambda_memory_size

  environment {
    variables = {
      AGENTMAP_ENVIRONMENT = var.environment
      AGENTMAP_LOG_LEVEL  = "INFO"
      AGENTMAP_DATA_BUCKET = aws_s3_bucket.agentmap_data.id
      AGENTMAP_RESULTS_TOPIC = aws_sns_topic.agentmap_results.arn
    }
  }

  tags = local.common_tags

  depends_on = [
    aws_iam_role_policy.lambda_execution_policy,
    aws_cloudwatch_log_group.lambda_logs,
  ]
}

# CloudWatch Log Group
resource "aws_cloudwatch_log_group" "lambda_logs" {
  name              = "/aws/lambda/${local.function_name}"
  retention_in_days = 14
  tags              = local.common_tags
}

# API Gateway for HTTP triggers
resource "aws_apigatewayv2_api" "agentmap_api" {
  name          = "${local.function_name}-api"
  protocol_type = "HTTP"
  description   = "AgentMap HTTP API"
  
  cors_configuration {
    allow_credentials = false
    allow_headers     = ["content-type", "x-amz-date", "authorization"]
    allow_methods     = ["*"]
    allow_origins     = ["*"]
    max_age          = 86400
  }

  tags = local.common_tags
}

resource "aws_apigatewayv2_stage" "agentmap_api_stage" {
  api_id      = aws_apigatewayv2_api.agentmap_api.id
  name        = var.environment
  auto_deploy = true

  tags = local.common_tags
}

resource "aws_apigatewayv2_integration" "agentmap_api_integration" {
  api_id               = aws_apigatewayv2_api.agentmap_api.id
  integration_type     = "AWS_PROXY"
  connection_type      = "INTERNET"
  integration_method   = "POST"
  integration_uri      = aws_lambda_function.agentmap_function.invoke_arn
  passthrough_behavior = "WHEN_NO_MATCH"
}

resource "aws_apigatewayv2_route" "agentmap_api_route" {
  api_id    = aws_apigatewayv2_api.agentmap_api.id
  route_key = "POST /{proxy+}"
  target    = "integrations/${aws_apigatewayv2_integration.agentmap_api_integration.id}"
}

resource "aws_apigatewayv2_route" "agentmap_api_root_route" {
  api_id    = aws_apigatewayv2_api.agentmap_api.id
  route_key = "POST /"
  target    = "integrations/${aws_apigatewayv2_integration.agentmap_api_integration.id}"
}

resource "aws_lambda_permission" "api_gateway_invoke" {
  statement_id  = "AllowExecutionFromAPIGateway"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.agentmap_function.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_apigatewayv2_api.agentmap_api.execution_arn}/*/*"
}

# SQS Queue for message triggers
resource "aws_sqs_queue" "agentmap_queue" {
  name                      = "${local.function_name}-queue"
  delay_seconds             = 0
  max_message_size          = 262144
  message_retention_seconds = 1209600  # 14 days
  receive_wait_time_seconds = 20       # Long polling

  tags = local.common_tags
}

resource "aws_sqs_queue" "agentmap_dlq" {
  name = "${local.function_name}-dlq"
  tags = local.common_tags
}

resource "aws_sqs_queue_redrive_policy" "agentmap_queue_redrive" {
  queue_url = aws_sqs_queue.agentmap_queue.id
  redrive_policy = jsonencode({
    deadLetterTargetArn = aws_sqs_queue.agentmap_dlq.arn
    maxReceiveCount     = 3
  })
}

# Lambda trigger for SQS
resource "aws_lambda_event_source_mapping" "sqs_trigger" {
  event_source_arn = aws_sqs_queue.agentmap_queue.arn
  function_name    = aws_lambda_function.agentmap_function.arn
  batch_size       = 1
  
  # Configure scaling
  maximum_batching_window_in_seconds = 5
  
  depends_on = [aws_iam_role_policy.lambda_execution_policy]
}

# DynamoDB table for database triggers
resource "aws_dynamodb_table" "agentmap_table" {
  name             = "${local.function_name}-table"
  billing_mode     = "PAY_PER_REQUEST"
  hash_key         = "id"
  stream_enabled   = true
  stream_view_type = "NEW_AND_OLD_IMAGES"

  attribute {
    name = "id"
    type = "S"
  }

  tags = local.common_tags
}

# Lambda trigger for DynamoDB Streams
resource "aws_lambda_event_source_mapping" "dynamodb_trigger" {
  event_source_arn  = aws_dynamodb_table.agentmap_table.stream_arn
  function_name     = aws_lambda_function.agentmap_function.arn
  starting_position = "LATEST"
  batch_size        = 1

  depends_on = [aws_iam_role_policy.lambda_execution_policy]
}

# S3 bucket for storage triggers
resource "aws_s3_bucket" "agentmap_data" {
  bucket = "${local.function_name}-data-${random_id.bucket_suffix.hex}"
  tags   = local.common_tags
}

resource "random_id" "bucket_suffix" {
  byte_length = 4
}

resource "aws_s3_bucket_versioning" "agentmap_data_versioning" {
  bucket = aws_s3_bucket.agentmap_data.id
  versioning_configuration {
    status = "Enabled"
  }
}

resource "aws_s3_bucket_notification" "agentmap_data_notification" {
  bucket = aws_s3_bucket.agentmap_data.id

  lambda_function {
    lambda_function_arn = aws_lambda_function.agentmap_function.arn
    events              = ["s3:ObjectCreated:*"]
    filter_prefix       = "uploads/"
    filter_suffix       = ".csv"
  }

  depends_on = [aws_lambda_permission.s3_invoke]
}

resource "aws_lambda_permission" "s3_invoke" {
  statement_id  = "AllowExecutionFromS3Bucket"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.agentmap_function.function_name
  principal     = "s3.amazonaws.com"
  source_arn    = aws_s3_bucket.agentmap_data.arn
}

# SNS topic for results publishing
resource "aws_sns_topic" "agentmap_results" {
  name = "${local.function_name}-results"
  tags = local.common_tags
}

# EventBridge rule for scheduled triggers
resource "aws_cloudwatch_event_rule" "agentmap_schedule" {
  name                = "${local.function_name}-schedule"
  description         = "Trigger AgentMap function on schedule"
  schedule_expression = "rate(1 hour)"  # Adjust as needed
  tags                = local.common_tags
}

resource "aws_cloudwatch_event_target" "lambda_target" {
  rule      = aws_cloudwatch_event_rule.agentmap_schedule.name
  target_id = "AgentMapLambdaTarget"
  arn       = aws_lambda_function.agentmap_function.arn

  input = jsonencode({
    action = "run"
    graph  = "ScheduledGraph"
    scheduled_event = {
      detail_type = "Scheduled Event"
      source      = "aws.events"
    }
  })
}

resource "aws_lambda_permission" "eventbridge_invoke" {
  statement_id  = "AllowExecutionFromEventBridge"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.agentmap_function.function_name
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.agentmap_schedule.arn
}

# CloudWatch Dashboard
resource "aws_cloudwatch_dashboard" "agentmap_dashboard" {
  dashboard_name = "${local.function_name}-dashboard"

  dashboard_body = jsonencode({
    widgets = [
      {
        type   = "metric"
        x      = 0
        y      = 0
        width  = 12
        height = 6

        properties = {
          metrics = [
            ["AWS/Lambda", "Duration", "FunctionName", aws_lambda_function.agentmap_function.function_name],
            [".", "Errors", ".", "."],
            [".", "Invocations", ".", "."],
            [".", "Throttles", ".", "."]
          ]
          view    = "timeSeries"
          stacked = false
          region  = var.aws_region
          title   = "Lambda Metrics"
          period  = 300
        }
      },
      {
        type   = "log"
        x      = 0
        y      = 6
        width  = 24
        height = 6

        properties = {
          query = "SOURCE '/aws/lambda/${aws_lambda_function.agentmap_function.function_name}'\n| fields @timestamp, @message\n| filter @message like /ERROR/\n| sort @timestamp desc\n| limit 20"
          region = var.aws_region
          title  = "Recent Errors"
        }
      }
    ]
  })
}

# Outputs
output "api_gateway_url" {
  description = "API Gateway URL for HTTP triggers"
  value       = aws_apigatewayv2_stage.agentmap_api_stage.invoke_url
}

output "sqs_queue_url" {
  description = "SQS Queue URL for message triggers"
  value       = aws_sqs_queue.agentmap_queue.url
}

output "dynamodb_table_name" {
  description = "DynamoDB table name for database triggers"
  value       = aws_dynamodb_table.agentmap_table.name
}

output "s3_bucket_name" {
  description = "S3 bucket name for storage triggers"
  value       = aws_s3_bucket.agentmap_data.id
}

output "lambda_function_name" {
  description = "Lambda function name"
  value       = aws_lambda_function.agentmap_function.function_name
}

output "sns_topic_arn" {
  description = "SNS topic ARN for results"
  value       = aws_sns_topic.agentmap_results.arn
}

output "cloudwatch_dashboard_url" {
  description = "CloudWatch Dashboard URL"
  value       = "https://${var.aws_region}.console.aws.amazon.com/cloudwatch/home?region=${var.aws_region}#dashboards:name=${aws_cloudwatch_dashboard.agentmap_dashboard.dashboard_name}"
}